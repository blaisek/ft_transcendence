"use strict";(self.webpackChunktranscendence=self.webpackChunktranscendence||[]).push([[861],{861:(t,e,o)=>{o.r(e),o.d(e,{default:()=>a});var n=o(397);const a=class extends n.default{constructor(t){super(t),this.setTitle("Home"),this.initialize().then((t=>console.log("Home Info loaded")))}async getHtml(){return'\n    <div class="container" style="max-width: 800px; overflow-y: auto; max-height: 700px;"> \x3c!-- Ajout de styles pour le d√©filement --\x3e\n        <div class="card bg-dark text-light mx-auto">\n            <div class="card-header text-center">\n                <h2>Profile</h2>\n            </div>\n            <div class="card-body">\n                <img id="profilePic" src="" class="img-fluid rounded-circle" alt="Profile pic">\n                <p class="card-text">\n                    <span id="username"></span>\n                </p>\n                <p class="card-text">\n                    <span id="email"></span>\n                </p>\n                <p class="card-text"> \n                    <span id="bio"></span>\n                </p>\n            </div>\n        </div>\n        <div class="card bg-dark text-light mx-auto">\n            <div class="card-header text-center">\n                <h2>Statistics</h2>\n            </div>\n            <div class="card-body">\n                <p class="card-text">\n                    Games Played: <span id="gamesPlayed"></span>\n                </p>\n                <p class="card-text">\n                    Games Won: <span id="gamesWon"></span>\n                </p>\n                <p class="card-text">\n                    Games Lost: <span id="gamesLost"></span>\n                </p>\n            </div>\n        </div>\n        <div class="card bg-dark text-light mx-auto">\n            <div class="card-header text-center">\n                <h2>Match History</h2>\n            </div>\n            <div class="card-body">\n                <ul class="list-group">\n                    \n                </ul>\n            </div>\n        </div>\n    </div>\n    '}async initialize(){const t=window.location.hostname,e=localStorage.getItem("token");if(e){try{const o=await fetch(`https://${t}/api/get_username/`,{method:"GET",headers:{Authorization:"Token "+e}});if(o.ok){const t=(await o.json()).username;document.getElementById("username").innerText="Username: "+t}else console.log("Failed to get username:",await o.text())}catch(t){console.log("Error:",t)}try{const o=await fetch(`https://${t}/api/get_email/`,{method:"GET",headers:{Authorization:"Token "+e}});if(o.ok){const t=(await o.json()).email;document.getElementById("email").innerText="Email: "+t}else console.log("Failed to get email:",await o.text())}catch(t){console.log("Error:",t)}try{const o=await fetch(`https://${t}/api/get_bio/`,{method:"GET",headers:{Authorization:"Token "+e}});if(o.ok){const t=(await o.json()).bio;document.getElementById("bio").innerText="Bio: "+t}else console.log("Failed to get bio:",await o.text())}catch(t){console.log("Error:",t)}try{const o=await fetch(`https://${t}/api/player_stats/${id}/`,{method:"GET",headers:{Authorization:"Token "+e}});if(o.ok){const t=await o.json();document.getElementById("gamesPlayed").innerText=t.total_matches,document.getElementById("gamesWon").innerText=t.won_matches,document.getElementById("gamesLost").innerText=t.lost_matches}else console.log("Failed to get statistics:",await o.text())}catch(t){console.log("Error:",t)}await this.getProfilePic(),await this.getMatchHistory()}else console.log("Token not found")}async getProfilePic(){const t=window.location.hostname,e=localStorage.getItem("token");if(e)try{const o=await fetch(`https://${t}/api/get_profile_pic/`,{method:"GET",headers:{Authorization:"Token "+e}});if(o.ok){const t=await o.json();document.getElementById("profilePic").src=t.profil_pic}else console.log("Failed to get profile pic:",await o.text())}catch(t){console.log("Error:",t)}else console.log("Token not found")}async getMatchHistory(){const t=window.location.hostname,e=localStorage.getItem("token");if(e)try{const o=await fetch(`https://${t}/api/get_match_history/`,{method:"GET",headers:{Authorization:"Token "+e}});if(o.ok){const t=await o.json(),e=document.querySelector(".card-body ul.list-group");t.forEach((t=>{const o=document.createElement("li");o.className="list-group-item bg-secondary text-light",o.innerHTML=`Date: <strong>${t.played_at}</strong> Played against <strong>${t.opponent}</strong> - Result: <strong>${t.player_score}</strong> - <strong>${t.opponent_score}</strong> - Winner <strong>${t.winner}</strong> `,e.appendChild(o)}))}else console.log("Failed to get match history:",await o.text())}catch(t){console.log("Error:",t)}else console.log("Token not found")}}}}]);