"use strict";(self.webpackChunktranscendence=self.webpackChunktranscendence||[]).push([[861],{861:(t,e,n)=>{n.r(e),n.d(e,{default:()=>a});var o=n(397);const a=class extends o.default{constructor(t){super(t),this.setTitle("Home"),this.initialize().then((t=>console.log("Home Info loaded")))}async getHtml(){return'\n        <div class="card bg-dark text-light mx-auto" style="max-width: 800px;">\n            <div class="card-header text-center">\n                <h2>Profile</h2>\n            </div>\n            <div class="card-body">\n                <img id="profilePic" src="" class="img-fluid rounded-circle" alt="Profile pic">\n                <p class="card-text">\n                   <span id="username"></span>\n                </p>\n                 <p class="card-text">\n                   <span id="nickname"></span>\n                </p>\n                <p class="card-text">\n                  <span id="email"></span>\n                </p>\n                <p class="card-text"> \n                   <span id="bio"></span>\n                </p>\n            </div>\n        </div>\n        <div class="card bg-dark text-light mx-auto" style="max-width: 800px;">\n            <div class="card-header text-center">\n                <h2>Statistics</h2>\n            </div>\n            <div class="card-body">\n                <p class="card-text">\n                    Games Played: <span id="gamesPlayed"></span>\n                </p>\n                <p class="card-text">\n                    Games Won: <span id="gamesWon"></span>\n                </p>\n                <p class="card-text">\n                    Games Lost: <span id="gamesLost"></span>\n                </p>\n            </div>\n        </div>\n        <div class="card bg-dark text-light mx-auto" style="max-width: 800px;">\n            <div class="card-header text-center">\n                <h2>Match History</h2>\n            </div>\n            <div class="card-body">\n                <ul class="list-group">\n                    \n                </ul>\n            </div>\n                    \n        </div>\n'}async initialize(){const t=window.location.hostname,e=localStorage.getItem("token");if(e){try{const n=await fetch(`https://${t}/api/get_username/`,{method:"GET",headers:{Authorization:"Token "+e}});if(n.ok){const t=(await n.json()).username;document.getElementById("username").innerText="Username: "+t}else console.log("Failed to get username:",await n.text())}catch(t){console.log("Error:",t)}try{const n=await fetch(`https://${t}/api/get_nickname/`,{method:"GET",headers:{Authorization:"Token "+e}});if(n.ok){const t=(await n.json()).username;document.getElementById("nickname").innerText="Nickname: "+t}else console.log("Failed to get Nickname:",await n.text())}catch(t){console.log("Error:",t)}try{const n=await fetch(`https://${t}/api/get_email/`,{method:"GET",headers:{Authorization:"Token "+e}});if(n.ok){const t=(await n.json()).email;document.getElementById("email").innerText="Email: "+t}else console.log("Failed to get email:",await n.text())}catch(t){console.log("Error:",t)}try{const n=await fetch(`https://${t}/api/get_bio/`,{method:"GET",headers:{Authorization:"Token "+e}});if(n.ok){const t=(await n.json()).bio;document.getElementById("bio").innerText="Bio: "+t}else console.log("Failed to get bio:",await n.text())}catch(t){console.log("Error:",t)}try{const n=await fetch(`https://${t}/api/get_statistics/`,{method:"GET",headers:{Authorization:"Token "+e}});if(n.ok){const t=await n.json();document.getElementById("gamesPlayed").innerText=t.gamesPlayed,document.getElementById("gamesWon").innerText=t.gamesWon,document.getElementById("gamesLost").innerText=t.gamesLost}else console.log("Failed to get statistics:",await n.text())}catch(t){console.log("Error:",t)}await this.getProfilePic(),await this.getMatchHistory()}else console.log("Token not found")}async getProfilePic(){const t=window.location.hostname,e=localStorage.getItem("token");if(e)try{const n=await fetch(`https://${t}/api/get_profile_pic/`,{method:"GET",headers:{Authorization:"Token "+e}});if(n.ok){const t=await n.json();document.getElementById("profilePic").src=t.profile_pic_url}else console.log("Failed to get profile pic:",await n.text())}catch(t){console.log("Error:",t)}else console.log("Token not found")}async getMatchHistory(){const t=window.location.hostname,e=localStorage.getItem("token");if(e)try{const n=await fetch(`https://${t}/api/get_match_history/`,{method:"GET",headers:{Authorization:"Token "+e}});if(n.ok){const t=await n.json(),e=document.querySelector(".card-body ul.list-group");t.forEach((t=>{const n=document.createElement("li");n.className="list-group-item bg-secondary text-light",n.innerHTML=`Played against <strong>${t.opponent}</strong> - Result: <strong>${t.result}</strong>`,e.appendChild(n)}))}else console.log("Failed to get match history:",await n.text())}catch(t){console.log("Error:",t)}else console.log("Token not found")}}}}]);